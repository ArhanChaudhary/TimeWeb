/* THIS FILE HAS NOT YET BEEN FULLY DOCUMENTED */
#assignments-container {
    position: relative;
    /* Ensure things dont get cutoff when crud.js puts overflow: hidden on this when an assignment is being deleted */
    top: -10px;
    padding-top: 10px;
    opacity: 0;
    --scale-percent-y: 1.05;
}
#assignments-container.comfy {
    --vertical-assignment-padding: 25px;
}
#assignments-container.compact {
    --vertical-assignment-padding: 15px;
}
main:not(.animate) {
    transition: box-shadow 1.5s cubic-bezier(.32,1.01,.53,1.15);
}
header:not(.animate), header:not(.animate)::after {
    transition: transform 1.7s cubic-bezier(.29,.81,.37,.99);
}
#assignments-container:not(.animate) {
    transition: transform 1.5s cubic-bezier(.29,.81,.37,.99);
}
main.animate {
    box-shadow: none;
}
header.animate {
    transform: translateY(-70px);
}
header.animate::after {
    transform: none;
}
#assignments-container.animate {
    transform: translateY(max(-400px, calc(-100% - 20px)));
    /* transform:translateY(min(calc(400px, calc(100% + 20px))); */
}
#tutorial-message {
    padding: 0 10px;
}
#icon-label-container {
    display: flex;
    align-items: center;
    margin-left: auto;
}
#assignments-header {
    position: relative;
    z-index: 1001;
    padding: 0 10px;
    margin-bottom: 4px;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}
#info {
    display: inline;
    font-size: 17px;
}
#info.dim {
    opacity: 0;
}
#current-date {
    position: relative;
    padding: 0 10px;
    font-size: 17px;
}
#hide-button {
    cursor: pointer;
    position: relative;
    left: 1px;
    bottom: 1px;
    background-color: white;
    border: 2px solid rgba(0,0,0,0.45);
    border-radius: 4px;
    margin-right: 5px;
}
#tomorrow-time {
    white-space: nowrap;
}
.hide-info {
    height: 0;
    width: 0;
    overflow: hidden;
    position: absolute;
}
#assignments-header img:not(:first-of-type), #assignments-header a {
    position: relative;
    z-index: 1;
    margin-left: 14px;
}
#assignments-header img {
    cursor: pointer;
}
#settings {
    /* Remove weird extra space */
    display: block;
}
#close-assignments {
    order: 2;
}
#previous-day {
    order: 3;
    transform: scaleX(-1);
}
#next-day {
    order: 4;
}
a[href="settings"] {
    order: 5;
}
#assignments-header #icon-label-container img ~ div {
    position: absolute;
    order: 1;
    padding-right: 5px;
    padding-left: 20px;
    right: 208px;
    text-align: right;
    display: none;
}
#assignments-header img#close-assignments:hover ~ div#close-assignments-icon-label,
#assignments-header img#previous-day:hover ~ div#previous-day-icon-label,
#assignments-header img#next-day:hover ~ div#next-day-icon-label,
#assignments-header a[href="settings"]:hover ~ div#settings-icon-label,
#assignments-header img#close-assignments:focus ~ div#close-assignments-icon-label,
#assignments-header img#previous-day:focus ~ div#previous-day-icon-label,
#assignments-header img#next-day:focus ~ div#next-day-icon-label,
#assignments-header a[href="settings"]:focus ~ div#settings-icon-label {
    display: block;
}
#assignments-header img#close-assignments:hover ~ div:not(#close-assignments-icon-label),
#assignments-header img#previous-day:hover ~ div:not(#previous-day-icon-label),
#assignments-header img#next-day:hover ~ div:not(#next-day-icon-label),
#assignments-header a[href="settings"]:hover ~ div:not(#settings-icon-label) {
    display: none !important;
}
.assignment-container {
    /* I remember the 2s was here for an important reason but i have no clue what */
    transition: transform 2s ease-in-out;
    position: relative;
    padding: 5px 10px;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;

     /* Zooming out sometimes creates a small gap betweeen add-line-wrapper::before and last-add-line-wrapper::after */
    --last-line-wrapper-left: 4px;
    --last-line-wrapper-width: 23px;
}
.assignment-container.transform-instantly, .assignment-container.transform-instantly .assignment-footer {
    transition: none !important;
}
.assignment {
    box-shadow: 0 0 4px rgb(115,115,115);
    background: white; /* Set white so it doesnt transition background initially if added by priority.js */
    /*  background: rgb(226,91,80);
    background: rgb(132,200,65); */
    padding: var(--vertical-assignment-padding) 15px;
    border: 2px solid rgb(80,80,80);
    border-radius: 5px;
    position: relative;
    width: 100%; /* Needed for when it becomes position: absolute during deletion */
    box-sizing: border-box;
    scroll-margin: 20px;
    transition: all .2s ease-in-out, opacity .375s ease-in-out, background calc(2s * var(--animation-speed)), left 0s, padding 0s;
}
.assignment.mark-as-done {
    opacity: 0.6;
}
.assignment-container:not(#animate-in, #animate-color) .assignment.transition-instantly {
    transition: none;
}
.assignment:not(.open-assignment):hover {
    transform: scale(var(--scale-percent-x), var(--scale-percent-y));
    border-color: rgba(0,0,0,0.7);
    cursor: pointer;
    box-shadow: 0 0 7px rgb(52,52,52);
}
.assignment:focus {
    outline: 0;
    border: 2px solid rgb(0,95,204) !important;
    box-shadow: 0 0 1px 2px rgb(0,95,204) !important;
}
.assignment::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    border-radius: 5px;
    opacity: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    transition: opacity .2s ease-in-out;
}
.assignment:not(:focus):not(.open-assignment):hover::after {
    box-shadow: 0 0 7px rgb(52,52,52);
    opacity: 1;
}
.shortcut {
    position: relative;
    /* z-index: 1000; might be needed? */
    margin-bottom: 15px;
    margin-top: -7px;
    cursor: pointer;
}
.shortcut-text {
    white-space: nowrap;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    margin-top: -10px;
}
/* Info buttons */
.shortcut-text:hover {
    z-index: 1000;
}
#autofill-selection {
    vertical-align: top;
    font-size: 12px;
}
.shortcut-line-left {
    left: -6px;
    margin-top: 9px;
    border-top: 2px solid black;
    top: 2px;
    position: relative;
}
.shortcut-line-right {
    float: right;
    border-top: 2px solid black;
}
#autofill-work-done .shortcut-line-left {
    width: calc(50% - 103px);
}
#autofill-work-done .shortcut-line-right {
    width: calc(50% - 108px);
}
#delete-starred-assignments .shortcut-line-left {
    width: calc(50% - 116px);
}
#delete-starred-assignments .shortcut-line-right {
    width: calc(50% - 121px);
}
.delete-gc-assignments-from-class .shortcut-line-left {
    width: calc(50% - 146px);
}
.delete-gc-assignments-from-class .shortcut-line-right {
    width: calc(50% - 152px);
}

.shortcut-line-left::after {
    content: '';
    position: absolute;
    border-left: 2px solid black;
    top: -2px;
    left: -1px;
    height: 12px;
}
.assignment-container.add-line-wrapper::before {
    content: '';
    position: absolute;
    /* Put the before wrapper in front of the after wrapper, which are both visible with grey-highlight */
    z-index: 1;
    height: 100%;
    left: 3px;
    bottom: -1px;
    border-left: 2px solid black;
}
.assignment-container.first-add-line-wrapper::before {
    height: calc(100% - 20px);
}
.assignment-container.last-add-line-wrapper::after {
    content: '';
    position: absolute;
    width: var(--last-line-wrapper-width);
    left: var(--last-line-wrapper-left);
    bottom: -1px;
    border-bottom: 2px solid black;
}
.assignment-container::before,
.assignment-container::after {
    cursor: pointer;
}
.assignment-header {
    display: flex;
    align-items: center;
}
.relative-positioning-wrapper {
    display: flex; /* things position weirdly when assignments are open without this for some reason */
    flex-direction: column; /* put description below name */
    position: relative;
    --description-opacity: 0.65;
    --description-font-size: 0.7em;
    --left-side-of-header-width: calc(12px + 13vw);
}
.description {
    position: relative;
    display: none;
    opacity: var(--description-opacity);
    white-space: pre-wrap;
    transform: translateY(-2px);
    min-width: var(--left-side-of-header-width);
    max-width: var(--left-side-of-header-width);
    word-wrap: break-word;
    font-size: var(--description-font-size);
}
/* Add to truncate warning if the below style is changed */
.assignment.open-assignment .description, .assignment.needs-more-info .description {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 6;
    overflow: hidden;
}
.assignment.open-assignment .relative-positioning-wrapper.display-truncate-warning::after,
.assignment.needs-more-info .relative-positioning-wrapper.display-truncate-warning::after {
    content: "[Description shortened]";
    opacity: var(--description-opacity);
    font-size: var(--description-font-size);
    margin-top: 1em;
    margin-bottom: 2px;
    max-width: var(--left-side-of-header-width);
}
.assignment:not(.open-assignment):not(.needs-more-info) .title {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
    overflow: hidden;
}
.title {
    min-width: var(--left-side-of-header-width);
    max-width: var(--left-side-of-header-width);
    font-size: min(16.76px, calc(11px + 0.4vw));
    overflow-wrap: break-word;
}
/* The order of these two below matter because the bottom one will overwrite the first one if there is only one assignment */
.assignment-container:nth-last-child(1) .title::before {
    content: "Least Important";
    position: absolute;
    font-size: 0.7em;
    margin-top: -12px;
}
#assignments-container > :not(.assignment-container) + .assignment-container .title::before {
    content: "Most Important";
    position: absolute;
    font-size: 0.7em;
    margin-top: -12px;
}
.title[data-priority]::before {
    content: attr(data-priority) !important;
    position: absolute;
    font-size: 0.7em;
    margin-top: -12px;
}
.title[data-daysleft]::after {
    content: attr(data-daysleft) !important;
    position: absolute;
    font-size: 0.7em;
    transform: translateY(100%) translateY(-2px);
    left: 0;
    bottom: 0;
}
.arrow-container {
    float: left;
    margin-left: max(5px,calc(-5px + 2vw));
    overflow: visible;
}
.right-side-of-header {
    font-size: min(16.76px,calc(11px + 0.4vw));
    margin: 0;
    margin-right: 7px;
    white-space: initial;
    display: flex;
    flex-grow: 1;
    align-items: center;
}
.status-image {
    position: absolute;
}
.align-to-status-message-container {
    margin-right: 6px;
    margin-left: 18px;
}
.tags {
    position: absolute;
    z-index: 1;
    top: 2px;
    white-space: nowrap;
    font-size: min(10.25px, 0.87em);
}

.assignment.tags-right .tags {
    right: 17px;
    z-index: 2;
}
.assignment.tags-left .tags {
    left: 15px;
}
.assignment.tags-left .tag-add-box {
    left: 23px;
}
.assignment.tags-bottom .tags {
    top: unset;
    bottom: 2px;
}
.assignment.open-assignment.tags-bottom .assignment-header {
    position: relative;
}
.assignment.open-assignment.tags-bottom .tags {
    top: 100%;
    bottom: unset;
    margin-top: -3px;
}
.assignment.open-assignment.tags-bottom.tags-right .tags {
    right: 2px;
    /* Dirty hardcoded fix to position tags with different assignment paddings */
    top: calc(100% + var(--vertical-assignment-padding) - 15px);
}
.assignment.open-assignment.tags-bottom.tags-left .tags {
    left: 0;
    margin-top: unset;
}
.assignment.open-assignment.tags-bottom.tags-left .tags.assignment-has-daysleft {
    margin-top: calc(1px * var(--margin-top));
    transform: translateY(-100%) translateY(-2px);
}

.tag-wrapper {
    position: relative;
    display: inline-block;
    vertical-align: top;
    padding: 0 5px;
    border: 1px solid black;
    border-radius: 10px;
    opacity: 1;
    cursor: ew-resize;
    margin-right: 3px;
    background: linear-gradient(135deg, rgb(255,255,255) 0%, rgb(222,222,222) 100%);
    transform-origin: right;
    transition: margin-left calc(0.75s * var(--animation-speed)) ease-in-out,
                opacity calc(0.7s * var(--animation-speed)) linear,
                transform calc(0.5s * var(--animation-speed)) linear calc(0.2s * var(--animation-speed));
}
.tag-wrapper.ghost {
    visibility: hidden;
}
.tag-delete {
    position: absolute;
    width: 8px;
    height: 8px;
    top: 3px;
    right: 3px;
    border-radius: 50%;
    background-color: black;
    cursor: pointer;
    opacity: 0;
    transition: opacity calc(0.1s * var(--animation-speed)) linear;
}
/* Don't do :hover::after because the ::after doesnt then become pointless */
.tag-delete::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    transform: translate(-25%, -25%);
    border-radius: 50%;
    border: 10px solid transparent;
}
.tag-add {
    position: relative;
    vertical-align: top;
    display: inline-block;
    top: 0;
    width: 14px;
    height: 14px;
    border-radius: 10px;
    background-color: rgb(231, 231, 231);
    border: 1px dashed rgb(24, 24, 24);
    cursor: pointer;
    transition: width calc(0.25s * var(--animation-speed)) ease-out;
}
.tag-add::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    left: 4px;
    transform: translate(-25%, -25%);
    border-radius: 17px;
    border: 17px solid transparent;
}
.tag-add-text {
    opacity: 0;
    transition: opacity calc(0.2s * var(--animation-speed)) linear;
    text-align: right;
    direction: rtl;
    margin-right: 4px;
    margin-left: 10px;

    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}
.tag-name {
    position: relative;
    z-index: 1;
    transition: margin-right calc(0.15s * var(--animation-speed)) ease-in-out;
}
.tag-wrapper:hover .tag-name, .tag-wrapper.keep-delete-open .tag-name {
    margin-right: 9px;
}
.tag-wrapper:hover .tag-delete, .tag-wrapper.keep-delete-open .tag-delete {
    opacity: 1;
}
.tag-add:hover, .tag-add.open-tag-add-box {
    width: 57px;
}
.tag-add:hover .tag-add-text, .tag-add.open-tag-add-box .tag-add-text {
    opacity: 1;
}
.tag-add-box {
    white-space: normal;
    width: 152px;
    box-shadow: 0 2px 5px 1px rgba(170,170,170,0.65) !important;
    background: white !important;
    transform-origin: top;
    transform: translateX(-50%) translateX(6px) scale(0.85) translateY(-5px) !important;
    transition: transform calc(0.15s * var(--animation-speed)) cubic-bezier(0.31, 1.15, 0.5, 1.2),
                opacity calc(0.1s * var(--animation-speed)) ease-out;
}
.tag-add-box::after {
    border-color: transparent transparent rgb(220,220,220) transparent !important;
    pointer-events: none;
    bottom: calc(100% - 1px) !important; /* -1 because 100% sometimes doesnt align properly */
}
.tag-add.open-tag-add-box .tag-add-box {
    transform: translateX(-50%) translateX(6px) !important;
    opacity: 1;
    height: unset;
    overflow: visible;
    border: 1px solid gray;
}
.tag-add-overflow-hidden-container {
    overflow: hidden;
    border-radius: 5px;
}
.tag-add-button {
    position: absolute;
    width: 30px;
    height: 30px;
    right: 3px;
    top: 4px;
    border-radius: 50%;
    background-color: rgb(195,195,195);
}
.tag-add-button::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    box-shadow: 0 0 4px 1px rgb(60, 60, 60);
    opacity: 0;
    transition: opacity 0.15s ease-out;
}
.tag-add-button:focus::after {
    opacity: 0.35;
}
.tag-add-button:focus:not(:hover)::after {
    box-shadow: 0 0 4px 2px rgb(30, 30, 30);
}
.tag-add-button:hover::after {
    opacity: 0.75;
}
.tag-add-button:focus {
    outline: 0;
}
.tag-add-button.tag-add-red-box-shadow::after {
    box-shadow: 0 0 4px 1px rgb(170, 0, 0);
}

.tag-add-plus {
    background-color: rgb(65,65,65) !important;
    height: 15px !important;
}
.tag-add-plus-second-slash {
    transform: rotate(90deg);
}
.tag-add-input {
    width: 100%;
    box-sizing: border-box;
    border: none;
    background-color: rgb(220,220,220);
    padding: 10px 12px;
    padding-right: 38px;
}
.tag-add-input:focus {
    outline: 0;
}

.tag-add-selection-item {
    position: relative;
    padding: 6px 4px;
}
.tag-add-selection-item::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    margin-top: auto;
    margin-bottom: auto;
    width: 100%;
    height: 100%;
    z-index: -1;
    background-color: rgb(240, 240, 240);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.4s cubic-bezier(.29,.81,.37,.99);
}
.tag-add-selection-item:hover::after, .tag-add-selection-item:focus::after {
    transform: none;
}
.tag-add-selection-item:focus {
    outline: 0;
}
.tag-add-selection-item.checked::after {
    background-color: lightblue;
    transform: none;
}
.tag-add-selection-item:nth-child(n+4)::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    margin-right: auto;
    margin-left: auto;
    width: calc(100% - 10px);
    height: 1px;
    background-color: rgba(0, 0, 0, 0.3);
}
.tag-add-selection-item-name {
    word-break: break-word;
}
.tag-add-checkbox {
    -webkit-appearance: auto;
}
.tag-add-transition-disabler {
    transition: none !important;
}
.icon-slash {
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    margin: auto;
    height: 6px;
    width: 1px;
    position: absolute;
    background-color: white;
}
.x-icon-first-slash {
    transform: rotate(45deg);
}
.x-icon-second-slash {
    transform: rotate(-45deg);
}
.plus-first-slash {
    right: unset;
    left: 6px;
    height: 9px;
    background-color: black;
}
.plus-second-slash {
    right: unset;
    left: 6px;
    height: 9px;
    background-color: black;
    transform: rotate(90deg);
}
.completion-time {
    white-space: nowrap;
    margin-left: auto;
}
.button {
    position: relative;
    display: flex;
    align-items: center;
    align-self: normal;
    justify-content: center;
    /* negate the variable pixel value */
    margin: calc(-1 * var(--vertical-assignment-padding)) 0;
    margin-right: -4px;
    padding: 0 7px;
    cursor: pointer;
    transition: background-color 0.25s ease-out;
}
.button:focus, .button:hover {
    outline: 0;
    background-color: rgb(173, 216, 230);
    z-index: 1;
}
.button:active * {
    transform: scale(0.95);
}
.button * {
    transition: transform 0.15s cubic-bezier(.29,1.13,.48,2.37);
}
.button.slashed:active .button-slash {
    transform: rotate(45deg) scale(0.95);
}
.button.slashed .tick-button {
    /* for help https://bennettfeely.com/clippy/ */
    -webkit-clip-path: polygon(0 0, 0 100%, 100% 100%, 10% 0, 25% 0, 100% 85%, 100% 0%);
            clip-path: polygon(0 0, 0 100%, 100% 100%, 10% 0, 25% 0, 100% 85%, 100% 0%);
}
.button-slash {
    display: none;
}
.button.slashed .button-slash {
    display: block;
    position: absolute;
    width: 30px;
    border-bottom: 2px solid black;
    transform: rotate(45deg);
}
.assignment-footer {
    position: relative;
    top: calc(var(--vertical-assignment-padding) - 5px); /* -5px because display inline block is stupid */
    display: none;
    /* firefox acts weirdly without this */
    width: 100%;
}
.graph-container {
    border-radius: 12px;
    height: clamp(200px,65vh,400px);
    width: calc(100% - 34px);
    position: relative;
    margin: 5px;
    margin-left: 13px;
    border: 4px solid rgba(108,108,108,.75); /* rgb(178,178,178) */
}
.graph-container canvas {
    width: 100%;
    height: 100%;
    border-radius: 7px;
}
.graph-container:focus {
    box-shadow: 0 0 0 3px rgb(0,95,204);
    outline: 0;
}
.fixed-graph {
    position: absolute;
}
.graph {
    display: block;
    position: relative;
}
.graph-footer .info-button {
    /* Prevent graph buttons from oversizing */
    margin-bottom: -1px;
    width: 22px;
    height: 17px;
    font-size: 15px;
    padding: 0 !important;
    line-height: 17px;
    cursor: pointer;
}
.graph-footer .info-button:hover {
    box-shadow: none;
}
.graph-footer {
    padding: 0 13px;
    position: relative;
    margin-top: 10px;
    padding-bottom: 7px;
    margin-bottom: -7px;
}
.graph-footer * {
    font-size: 13.3333px;
    border-radius: 20px;
    border: none;
    padding: 3px 6px;
    cursor: pointer;
    background: rgba(219,219,219,0.9);
    box-shadow: 0 0 2px 2px rgba(189,189,189,0.9);
}
.graph-footer *:not(.info-button):not(.advanced-buttons):focus {
    outline: 0;
    border-color: rgb(0,95,204);
    background: white;
    box-shadow: 0 0 0 3px rgb(0,95,204);
}
.advanced-buttons, .advanced-buttons svg {
    background: none;
    border-radius: unset;
    padding: 0;
    box-shadow: none;
}
/* 1st column */
.delete-work-input-button, .skew-ratio-button {
    position: absolute;
    left: 0;
}
/* 2nd column */
.work-input-textbox, .skew-ratio-textbox, .advanced-buttons  {
    position: relative;
    left: 50%;
    transform: translateX(-50%);
}
.advanced-buttons {
    border-bottom: 1px solid;
    width: 127px;
    font-size: 12px;
}
.first-advanced-buttons {
    margin-top: 7px;
}
/* 3rd column */
.submit-work-button, .fixed-mode-button {
    position: absolute;
    right: 0;
}
/* 2nd row */
.skew-ratio-button, .skew-ratio-textbox, .fixed-mode-button {
    margin-top: 9px;
    margin-bottom: 7px;
}
.work-input-textbox {
    width: 111px;
}
.skew-ratio-textbox {
    width: 123px;
}
.skew-ratio-textbox::-webkit-inner-spin-button {
    transform: translateX(-2px);
}
input[type=number]::-webkit-inner-spin-button {
    cursor: pointer;
    opacity: 1 !important;
    border-left: 1px solid #d8d8d8;
    height: 20px;
}
#form-wrapper input[type=number]::-webkit-inner-spin-button {
    display: none;
}

#form-wrapper input:focus, #form-wrapper label:focus, #form-wrapper textarea:focus {
    outline: 0;
    box-shadow: 0 0 4px rgba(0,95,204,0.6), inset 0 0 0 1px rgb(0,95,204) !important; 
}
#form-wrapper input:required {
    box-shadow: none; /* Firefox */
}
#form-wrapper input[type=date] {
    /* Mobile */
    background: white !important;
}
#form-wrapper label::after {
    position: absolute;
    display: block;
    font-size: 12px;
    right: -10px;
    bottom: -3px;
    transform: translateY(100%);
}
#form-wrapper input::-webkit-datetime-edit {
    display: contents;
}
#form-wrapper input::-webkit-calendar-picker-indicator {
    margin-left: unset;
}
@media screen and (min-width: 456px) {
    #form-wrapper label[for='id_x']::after {
        content: '(Predicted if left empty)';
    }
}
@media screen and (min-width: 344px) {
    #form-wrapper label[for='id_assignment_date']::after {
        content: "(Enter today if you don't remember)";
    }
}
#form-wrapper label[for='id_min_work_time']::after {
    content: '(Disabled if left empty)';
    bottom: -2px !important;
}
#form-wrapper {
    width: min(100vw, 490px);
    box-sizing: border-box;
    background: white;
    box-shadow: 0 0 8px black;
    margin: 5px auto 35px;
    border: 1px solid black;
    border-radius: 15px;
    padding: 5px 5px 25px 5px;
    position: relative;
}
#form-wrapper #cancel-button {
    position: absolute;
    cursor: pointer;
    right: 7px;
    top: 9px;
    border: 7px solid white;
    z-index: 1;
    min-height: unset;
    min-width: unset;
    background-color: white;
    transition: transform 0.15s cubic-bezier(.29,1.13,.48,2.37);
}
#form-wrapper #cancel-button:active {
    transform: scale(0.95);
}
#form-wrapper #new-title-line {
    width: calc(100% - 20px);
    position: absolute;
    margin-top: 1.25em;
    left: 10px;
    border: 1px solid lightgray;
}
#form-wrapper #new-title {
    display: inline-block;
    font-size: 27px;
    margin-bottom: -0.25em;
    position: relative;
    z-index: 1;
    background: white;
    padding: 0 4px;
    left: 50%;
    transform: translateX(-50%);
}
#form-wrapper #fields-wrapper {
    overflow-y: scroll;
    overflow-y: overlay;
    --soft-label-width: 78px;
    position: relative;
}
#form-wrapper .field-wrapper {
    margin-top: 10px;
}
#form-wrapper .field-wrapper .invalid ~ .info-button {
    margin-top: -1px;
}
#form-wrapper .field {
    width: calc(100% - 50px);
    margin: 5px;
}
#form-wrapper label, #form-wrapper #break-days-label-title {
    text-align: center;
    display: block;
    position: relative;
}
#form-wrapper label:not(.break-days-label) {
    margin: 0 25px;
}
#form-wrapper input, #form-wrapper textarea {
    box-sizing: border-box; 
    display: block;
    margin-left: 10px;
    width: calc(100% - 20px);
    border: 1px solid black;
    border-radius: 3px;
}
#form-wrapper input[type="date"] {
    /* IOS */
    min-width: calc(100% - 30px);
}
#form-wrapper .field-wrapper#id-soft-field-wrapper {
    position: absolute;
    transform: translateY(-33px);
    right: 10px;
}
#form-wrapper .field-wrapper#id-due_time-field-wrapper {
    position: absolute;
    margin-left: 10px;
    transform: translate(calc(var(--right-translate, 0) * 1px), -33px);
}
#form-wrapper #id_due_time {
    border: none;
    width: unset;
    background-color: unset;
}
#form-wrapper #id_soft {
    width: unset;
    display: inline;
    margin-right: 3px;
    margin-left: 0;
}
#form-wrapper label[for='id_soft'] {
    display: inline;
    margin: unset;
}
#form-wrapper #id_x {
    min-width: calc(100% - 30px - var(--soft-label-width));
    width: calc(100% - 20px - var(--soft-label-width));
}
#form-wrapper .field-wrapper label[for='id_x']::after {
    right: calc(var(--soft-label-width) - 10px);
}
#form-wrapper #advanced-inputs {
    border-bottom: 1px solid;
    cursor: pointer;
    width: 149px;
    margin: 10px auto 0;
}
#form-wrapper input.disabled-field, #form-wrapper label.disabled-field {
    opacity: 1;
}
#form-wrapper label.disabled-field {
    opacity: 0.6 !important;
    transition: opacity .25s ease-out;
}
#form-wrapper input:not(.disabled-field), #form-wrapper textarea {
    padding: 1px;
}
#form-wrapper textarea {
    resize: none;
}
#form-wrapper input.disabled-field {
    opacity: 0.75 !important;
    background-color: rgb(228,228,228);
    border-color: rgb(103,103,103);
    border-width: 2px;
    padding: 0;
    padding-left: 1px;
    cursor: not-allowed;
    color: black;
    transition: all .25s ease-out, border-width 0s, padding 0s;
}
#submit-assignment-button {
    width: calc(100% - 140px);
    margin: 10px auto 0;
    display: block;
    padding: 20px 45px;
    font-size: 19px;
    -webkit-appearance: none;
    background: rgb(238, 238, 238);
    border-radius: 3px;
    border: 1px solid rgb(79, 79, 79);
}
#submit-assignment-button:hover {
    background: rgb(229, 229, 229);
}
#submit-assignment-button:active {
    background: rgb(245, 245, 245);
    transform: translateY(1px);
}
#form-wrapper .invalid {
    border: 2px solid rgb(226,30,54);
}
#form-wrapper .error-note {
    text-align: center;
    font-size: 13px;
    color: rgb(226,30,54);
}
#overlay {
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 1002;
    display: none;
}
#break-days-wrapper {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    margin: 0 50px;
}
#toggle-gc-container {
    display: flex;
    align-items: center;
    position: fixed;
    height: 50px;
    border-radius: 25px;
    right: 10px;
    bottom: 15px;
    padding: 4px;
    box-sizing: border-box;
    text-align: right;
    background-color: white;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 0 5px 1px black;
}
#toggle-gc-container.enabled {
    box-shadow: 0 0 5px 1px #3fff00, 0 0 2px 1px #29a400;
}
#toggle-gc-label {
    width: 0;
    overflow: hidden;
    opacity: 0;
    display: inline-block;
    text-align: left;
    white-space: nowrap;
    transform: translateX(50px);
    transition: width calc(0.5s * var(--animation-speed)) cubic-bezier(0, 0, 0.5, 1);
}
#toggle-gc-container img {
    position: relative;
}
#toggle-gc-container:hover #toggle-gc-label, #toggle-gc-container.open #toggle-gc-label {
    opacity: 1;
    transform: translateX(10px);
    transition: width calc(0.5s * var(--animation-speed)) cubic-bezier(0, 0, 0.5, 1),
                opacity calc(0.35s * var(--animation-speed)) linear calc(0.15s * var(--animation-speed)),
                transform calc(0.3s * var(--animation-speed)) linear calc(0.15s * var(--animation-speed));
}
#toggle-gc-container:hover #toggle-gc-label {
    width: 304px;
}
#toggle-gc-container.open #toggle-gc-label {
    width: 333px;
}

#dark-mode #assignments-header img,
.grey-highlight:not(.assignment-container),
.grey-highlight.assignment-container::after,
.grey-highlight.assignment-container::before {
    --filter-drop-shadow-blur: 1px;
    --filter-drop-shadow-color: white;
    font-size: 19px !important;
    filter: drop-shadow(0 0 var(--filter-drop-shadow-blur, 0) var(--filter-drop-shadow-color, transparent))
            drop-shadow(0 0 var(--filter-drop-shadow-blur, 0) var(--filter-drop-shadow-color, transparent))
            drop-shadow(0 0 var(--filter-drop-shadow-blur, 0) var(--filter-drop-shadow-color, transparent)) 
            invert(var(--filter-invert, 0));
}
.grey-highlight.shortcut-text {
    font-size: unset !important;
}

#dark-mode .assignment-container::after,
#dark-mode .assignment-container::before,
#dark-mode .shortcut-line-right,
#dark-mode .shortcut-line-left,

#dark-mode #assignments-container > :not(.assignment-container):not(#assignments-header),
#dark-mode #assignments-container > #assignments-header > :not(#icon-label-container),

#dark-mode #assignments-header #icon-label-container img ~ div,

#dark-mode .shortcut-text,

#dark-mode .shortcut .info-button,
#dark-mode #assignments-header #icon-label-container img ~ div > .info-button,

/* Need these annoying rules instead of just doing ".assignment-container.invert-text-color .assignment-header *" because it messes up positioning */
.assignment-container.invert-text-color .assignment-header > :not(.right-side-of-header):not(.button),
.assignment-container.invert-text-color .assignment-header > .button > *,
.assignment-container.invert-text-color .assignment-header > .right-side-of-header > :not(.align-to-status-message-container),
.assignment-container.invert-text-color .assignment-header > .right-side-of-header > .align-to-status-message-container > :not(.tags),

#dark-mode .tags,

/* Undo filter already applied by #dark-mode .assignment-footer */
#dark-mode .assignment-container:not(.invert-text-color) .advanced-buttons,
html:not(#dark-mode) .assignment-container.invert-text-color .advanced-buttons,
#dark-mode .assignment-footer,

#dark-mode #assignments-container .info-button-text:not(.tag-add-box),

#dark-mode #tutorial-click-assignment-to-open {
    --filter-invert: 1;
    filter: drop-shadow(0 0 var(--filter-drop-shadow-blur, 0) var(--filter-drop-shadow-color, transparent))
            drop-shadow(0 0 var(--filter-drop-shadow-blur, 0) var(--filter-drop-shadow-color, transparent))
            drop-shadow(0 0 var(--filter-drop-shadow-blur, 0) var(--filter-drop-shadow-color, transparent)) 
            invert(var(--filter-invert, 0));
}
/* Fix double invert */
#dark-mode #next-day-icon-label .grey-highlight, #dark-mode #previous-day-icon-label .grey-highlight {
    --filter-invert: 0;
}
#dark-mode #overlay {
    filter: brightness(0.8);
    background-color: rgba(0,0,0,0.55);
}
#dark-mode body {
    --body-background: radial-gradient(circle, rgb(10,10,10) 0, rgb(58,58,58) 100%);
}